---
description: 
globs: 
alwaysApply: true
---
## ✅ AI Cursor + Clean Code Rules (2025 Edition)

---

### 🔒 1. Non-Destructive Editing
- Always **read the full code context first** before generating.
- Do **not delete or rewrite unrelated logic**.
- Do **not rename existing variables, functions, or components**.
- If major refactor is needed, wrap changes with comment: `// Updated by AI YYYY-MM-DD`

---

### 🔍 2. Pseudocode Before Code
- Every request must start with clear step-by-step pseudocode.
- Ask for confirmation before generating code.

Example:
```txt
Pseudocode:
- Render a Like button
- Show "❤️ Liked" if liked, otherwise "♡ Like"
- Support onClick, onKeyDown
- Use Tailwind class for cursor-pointer
- Add accessibility attributes: role, tabIndex, aria-label
```

---

### 🧼 3. Clean Code Guidelines
| Rule | Description |
|------|-------------|
| const > function | Use `const handleClick = () => {}` |
| Descriptive Naming | No `foo`, `bar`, `data1` |
| Early Return | Avoid deep nesting of conditions |
| Use Tailwind | Avoid inline styles or CSS files |
| No ternary in `className` | Use `clsx`, `class:` when supported |
| No TODOs | All code must be complete |
| Prioritize readability | Prefer clarity over performance |
| Break long components | Split if over 50 lines |

---

### ♿ 4. Accessibility Rules
| Element | Required |
|---------|----------|
| `div`/`button` | `tabIndex=0`, `aria-label`, `role="button"`, `onKeyDown` |
| `img` | Must include `alt` |
| `a` | Must include `aria-label`, `role="link"` if not anchor |
| Keyboard Interactions | `Enter`, `Space` must trigger `onClick` |

---

### 🧠 5. Smart Code Logic
- If the requirement is unclear → **ask instead of guessing**.
- If no correct answer exists → **state it clearly**.
- Only generate when everything is understood.

---

### 📦 6. Final Code Output Must:
- Include all required imports
- Export components correctly
- Be complete and functional (no placeholders)
- Be minimal outside the core requirement
- Be visually and logically reviewed

---

### ✅ Example Workflow:
```txt
Task: Add cursor:pointer to product card on hover

✔ Pseudocode:
- Locate div with card class
- Check if cursor-pointer is missing
- Add cursor-pointer only
→ Confirmed → Generate code

✘ Wrong: Rewriting the full card (risk of logic loss)
```

---
- Follow the user’s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
 Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.
- Use early returns whenever possible to make the code more readable.
- Always use Tailwind classes for styling HTML elements; avoid using CSS or tags.
- Use “class:” instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a “handle” prefix, like “handleClick” for onClick and “handleKeyDown” for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex=“0”, aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, “const toggle = () =>”. Also, define a type if possible.

> This rule file is enforced in all AI code suggestions to ensure non-destructive, readable, accessible, and maintainable code. Use it to validate or reject code generated by AI systems.


